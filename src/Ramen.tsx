/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ramen.glb --types --transform --shadows --keepnames --draco . 
Files: ramen.glb [8.54MB] > /Users/Carsten.Hoyer/Workspace/no/public/ramen-transformed.glb [700.08KB] (92%)
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, PerspectiveCamera, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube004: THREE.Mesh;
    Cube004_1: THREE.Mesh;
    Sphere: THREE.Mesh;
    Sphere001: THREE.Mesh;
    Plane002: THREE.Mesh;
    Noodle002: THREE.Mesh;
    Noodle003: THREE.Mesh;
    Noodle: THREE.Mesh;
  };
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshPhysicalMaterial;
    PaletteMaterial003: THREE.MeshPhysicalMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "SticksAction"
  | "Sticks.001Action"
  | "Noodle.002Action"
  | "Noodle.003Action"
  | "NoodleAction";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

export function Ramen(props: JSX.IntrinsicElements["group"]) {
  const groupRef = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/ramen-transformed.glb",
    "."
  ) as GLTFResult;
  const { actions } = useAnimations(animations, groupRef);

  useEffect(() => {
    actions["Noodle.002Action"]?.play();
    actions["Noodle.003Action"]?.play();
    actions["NoodleAction"]?.play();
    actions["SticksAction"]?.play();
    actions["Sticks.001Action"]?.play();
  }, [actions]);

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <group name="Scene">
        <PerspectiveCamera
          name="Camera"
          makeDefault={true}
          far={1000}
          near={0.1}
          fov={39.598}
          position={[1.164, 2.257, 2.766]}
          rotation={[-0.687, 0.343, 0.269]}
        />
        <group
          name="Sticks"
          position={[0.256, 0.419, 0.012]}
          rotation={[Math.PI, 0, -0.235]}
          scale={[-0.325, -0.027, -0.027]}
        >
          <mesh
            name="Cube004"
            castShadow
            receiveShadow
            geometry={nodes.Cube004.geometry}
            material={materials.PaletteMaterial001}
          />
          <mesh
            name="Cube004_1"
            castShadow
            receiveShadow
            geometry={nodes.Cube004_1.geometry}
            material={materials.PaletteMaterial001}
          />
        </group>
        <group
          name="Sticks001"
          position={[0.256, 0.419, -0.051]}
          rotation={[3.136, -0.034, -0.161]}
          scale={[-0.325, -0.027, -0.027]}
        >
          <mesh
            name="Cube004"
            castShadow
            receiveShadow
            geometry={nodes.Cube004.geometry}
            material={materials.PaletteMaterial001}
          />
          <mesh
            name="Cube004_1"
            castShadow
            receiveShadow
            geometry={nodes.Cube004_1.geometry}
            material={materials.PaletteMaterial001}
          />
        </group>
        <mesh
          name="Sphere"
          castShadow
          receiveShadow
          geometry={nodes.Sphere.geometry}
          material={materials.PaletteMaterial001}
          position={[0, 0.27, 0]}
        />
        <mesh
          name="Sphere001"
          castShadow
          receiveShadow
          geometry={nodes.Sphere001.geometry}
          material={materials.PaletteMaterial002}
          position={[0, 0.232, 0]}
        />
        <mesh
          name="Plane002"
          castShadow
          receiveShadow
          geometry={nodes.Plane002.geometry}
          material={materials.PaletteMaterial003}
          position={[-0.193, 0.299, -0.108]}
          rotation={[Math.PI / 2, 0, -1.046]}
        />
        <mesh
          name="Noodle002"
          castShadow
          receiveShadow
          geometry={nodes.Noodle002.geometry}
          material={materials.PaletteMaterial001}
          position={[0, 0.403, 0]}
          rotation={[0, Math.PI / 2, 0]}
          scale={0.063}
        />
        <mesh
          name="Noodle003"
          castShadow
          receiveShadow
          geometry={nodes.Noodle003.geometry}
          material={materials.PaletteMaterial001}
          position={[0.022, 0.403, 0]}
          rotation={[0, Math.PI / 2, 0]}
          scale={0.063}
        />
        <mesh
          name="Noodle"
          castShadow
          receiveShadow
          geometry={nodes.Noodle.geometry}
          material={materials.PaletteMaterial001}
          position={[0.047, 0.403, 0]}
          rotation={[0, Math.PI / 2, 0]}
          scale={0.063}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/ramen-transformed.glb");
